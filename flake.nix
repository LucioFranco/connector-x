# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.22)
{

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-24.11";
    utils.url = "github:numtide/flake-utils";
    pyproject-nix = {
      url = "github:pyproject-nix/pyproject.nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs = {
        nixpkgs.follows = "nixpkgs";
        flake-utils.follows = "utils";
      };
    };
  };

  outputs =
    {
      self,
      nixpkgs,
      rust-overlay,
      ...
    }:
    let

      overlays = [
        rust-overlay.overlays.default
        (final: prev: {
          rustToolchain = final.rust-bin.stable.latest.default.override {
            extensions = [ "rust-src" ];
          };
        })
      ];

      supportedSystems = [
        "x86_64-linux"
        "aarch64-darwin"
      ];
      forEachSupportedSystem =
        f:
        nixpkgs.lib.genAttrs supportedSystems (
          system: f { pkgs = import nixpkgs { inherit overlays system; }; }
        );
    in
    {
      packages = forEachSupportedSystem (
        { pkgs }:
        {
          default = pkgs.python3Packages.buildPythonPackage rec {
            pname = "connectorx";
            version = "0.4.3";
            format = "pyproject";

            src = ./.;

            sourceRoot = "connectorx-python";

            # Force the unpack to flatten $src/* into the build dir
            unpackPhase = ''
              runHook preUnpack
              cp -R $src/. .
              runHook postUnpack
            '';

            cargoDeps = pkgs.rustPlatform.fetchCargoVendor {
              inherit src sourceRoot;
              name = "${pname}-python-${version}";
              hash = "sha256-j3sm99AxV+q99UYhVIbOPqC81IeCVq5BjWKNMTmNr2M=";
            };

            env = {
              # needed for openssl-sys
              OPENSSL_NO_VENDOR = 1;
              OPENSSL_LIB_DIR = "${pkgs.lib.getLib pkgs.openssl}/lib";
              OPENSSL_DIR = "${pkgs.lib.getDev pkgs.openssl}";
              BINDGEN_EXTRA_CLANG_ARGS = "--sysroot=$(xcrun --sdk macosx --show-sdk-path)";
            };

            nativeBuildInputs = [
              pkgs.krb5 # needed for `krb5-config` during libgssapi-sys
              pkgs.pkg-config

              pkgs.rustPlatform.cargoSetupHook
              pkgs.rustPlatform.maturinBuildHook
              pkgs.rustPlatform.bindgenHook
            ];

            # nativeCheckInputs = [ pytestCheckHook ];

            buildInputs = with pkgs; [
              libkrb5 # needed for libgssapi-sys
              openssl # needed for openssl-sys
              pkg-config
            ];

            pythonImportsCheck = [ "connectorx" ];

          };
        }
      );

      devShells = forEachSupportedSystem (
        { pkgs }:
        {
          default = pkgs.mkShell {

            packages = with pkgs; [
              rustToolchain
              rust-analyzer
            ];

            nativeBuildInputs = with pkgs; [
              krb5
              pkg-config
            ];

            env = {
              RUST_SRC_PATH = "${pkgs.rustToolchain}/lib/rustlib/src/rust/library";
            };
          };
        }
      );
    };
}
